generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Persona {
  id_persona    Int             @id @unique(map: "id_persona") @default(autoincrement())
  rol           Int
  apoderadoId   Int?
  visitaId      Int?
  fecha_inicio  DateTime?       @db.Date
  fecha_termino DateTime?       @db.Date
  ingreso       Ingreso[]
  apoderado     Apoderado?      @relation(fields: [apoderadoId], references: [id_apoderado])
  rolObj        Rol             @relation(fields: [rol], references: [codigo_rol])
  visita        Visita?         @relation(fields: [visitaId], references: [id_visita])
  eventos       PersonaEvento[]
  observacion   String?         // Nuevo campo de observaci√≥n opcional


  @@index([rol], map: "Persona_rol_fkey")
  @@index([apoderadoId], map: "Persona_apoderadoId_fkey")
  @@index([visitaId], map: "Persona_visitaId_fkey")
}

model Apoderado {
  id_apoderado Int               @id @default(autoincrement())
  rut          String            @unique(map: "rut") @db.VarChar(255)
  nombre       String
  apellido     String
  telefono     String            @db.VarChar(15)
  fecha_inicio  DateTime?       @db.Date
  fecha_termino DateTime?       @db.Date
  alumnos      ApoderadoAlumno[]
  personas     Persona[]
}

model Visita {
  id_visita Int       @id @default(autoincrement())
  rut       String    @unique(map: "rut") @db.VarChar(255)
  nombre    String
  apellido  String
  telefono  String    @db.VarChar(15)
  fecha_inicio  DateTime?       @db.Date
  fecha_termino DateTime?       @db.Date
  personas  Persona[]
}



model Curso {
  id_curso    Int           @id @default(autoincrement())
  nombre      String
  descripcion String
  alumnos     Alumno[]
  CursoEvento CursoEvento[]
}

model CursoEvento {
  cursoId  Int
  eventoId Int
  curso    Curso  @relation(fields: [cursoId], references: [id_curso])
  evento   Evento @relation(fields: [eventoId], references: [codigo_evento])

  @@unique([eventoId, cursoId], map: "cursoId")
  @@index([eventoId], map: "CursoEvento_eventoId_fkey")
}

model Alumno {
  id_alumno  Int               @id @default(autoincrement())
  rut        String            @db.VarChar(255)
  nombre     String
  apellido   String
  cursoId    Int
  curso      Curso             @relation(fields: [cursoId], references: [id_curso])
  apoderados ApoderadoAlumno[]

  @@index([cursoId], map: "Alumno_cursoId_fkey")
}

model ApoderadoAlumno {
  apoderadoId Int
  alumnoId    Int
  alumno      Alumno    @relation(fields: [alumnoId], references: [id_alumno])
  apoderado   Apoderado @relation(fields: [apoderadoId], references: [id_apoderado])
  fecha_inicio  DateTime?       @db.Date
  fecha_termino DateTime?       @db.Date
  @@unique([apoderadoId, alumnoId], map: "apoderadoId")
  @@index([alumnoId], map: "ApoderadoAlumno_alumnoId_fkey")
}

model Evento {
  codigo_evento Int             @id @default(autoincrement())
  tema          String          @db.VarChar(255)
  descripcion   String          @db.VarChar(255)
  fecha         DateTime
  CursoEvento   CursoEvento[]
  personas      PersonaEvento[]

}

model Ingreso {
  fechaIngreso  DateTime
  personaId     Int
  persona       Persona  @relation(fields: [personaId], references: [id_persona])
  motivo      String?

  @@id([fechaIngreso, personaId])
  @@index([personaId], map: "Ingreso_personaId_fkey")
}

model PersonaEvento {
  eventoId  Int
  personaId Int
  evento    Evento  @relation(fields: [eventoId], references: [codigo_evento])
  persona   Persona @relation(fields: [personaId], references: [id_persona])

  @@unique([eventoId, personaId], map: "eventoId")
  @@index([personaId], map: "PersonaEvento_personaId_fkey")
}

model Rol {
  codigo_rol  Int       @id @default(autoincrement())
  descripcion String    @db.VarChar(255)
  personas    Persona[]
}
